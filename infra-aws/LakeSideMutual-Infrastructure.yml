AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy Kubernetes cluster, MySQL database, and ECR for LakeSideMutual including VPC and subnets.

Parameters:
  DBPassword:
    NoEcho: true
    Description: Password for the MySQL database
    Type: String
    MinLength: 8

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnetOne:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']

  PublicSubnetTwo:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  GatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  DefaultRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociationOne:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociationTwo:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref RouteTable

  ECRRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: 'lakeside'

  EKSCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: 'LakeSideMutual-EKS'
      RoleArn: !GetAtt EKSClusterRole.Arn
      Version: '1.24'
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSClusterSecurityGroup
        SubnetIds:
          - !Ref PublicSubnetOne
          - !Ref PublicSubnetTwo

  EKSClusterRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'eks.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEKSClusterPolicy'
        - 'arn:aws:iam::aws:policy/AmazonEKSServicePolicy'

  EKSClusterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for EKS Cluster'
      VpcId: !Ref VPC

  NodeGroup:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodeRole.Arn
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      ScalingConfig:
        DesiredSize: 2
        MinSize: 1
        MaxSize: 3
      NodegroupName: 'LakeSideMutual-NodeGroup'
      AmiType: 'AL2_x86_64'
      InstanceTypes:
        - 't3.medium'

  EKSNodeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy'
        - 'arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy'
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'

  RDSDBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: 'lakesidedb'
      AllocatedStorage: '20'
      DBInstanceClass: 'db.t3.micro'
      Engine: 'mysql'
      MasterUsername: 'admin'
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: true

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'Subnets available for the RDS DB Instance'
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo

  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for RDS DB Instance'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 3306
          ToPort: 3306
          CidrIp: '0.0.0.0/0'

Outputs:
  EKSClusterEndpoint:
    Description: Endpoint for EKS cluster
    Value: !GetAtt EKSCluster.Endpoint

  ECRRepositoryURI:
    Description: URI for ECR repository
    Value: !GetAtt ECRRepository.RepositoryUri

  RDSDBInstanceEndpoint:
    Description: Connection endpoint for the RDS instance
    Value: !GetAtt RDSDBInstance.Endpoint.Address
